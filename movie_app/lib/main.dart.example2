import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Movie App',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Movie App'),
        ),
        body: MovieInfo(),
      ),
    );
  }
}

class Movie {
  final String title;
  final int rate;

  Movie({
    required this.title,
    required this.rate,
  });

  factory Movie.fromJson(Map<String, dynamic> json) {
    return Movie(
      title: json['title'],
      rate: json['vote_average'],
    );
  }
}

Future<Movie> fetchMovie() async {
  final response = await http
      .get(Uri.parse('https://api.themoviedb.org/3/movie/703771?api_key=af6d7f4ac657b5f325d788bcb28209bd&language=en-US'));

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    return Movie.fromJson(jsonDecode(response.body));
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to load movie');
  }
}

class MovieInfo extends StatefulWidget {
  const MovieInfo({Key? key}) : super(key: key);

  @override
  _MovieInfoState createState() => _MovieInfoState();
}

class _MovieInfoState extends State<MovieInfo> {
  late Future<Movie> futureMovie;

  @override
  void initState() {
    super.initState();
    futureMovie = fetchMovie();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<Movie>(
        future: futureMovie,
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return Card(
              child:  SizedBox(
                width: 300,
                height: 100,
                child: Center(
                  child: Text(snapshot.data!.title),
                ),
              ),
            );
            // return Text(snapshot.data!.title);
          } else if (snapshot.hasError) {
            return Text('${snapshot.error}');
          } else {
            // By default, show a loading spinner.
            return const CircularProgressIndicator();
          }
        },
      );
  }
}
